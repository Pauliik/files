# Листинг 9.10 Знакомство с перегрузкой операторов

# Класс со спецальными методами 
class MyClass:
    # Конструктор
    def __init__(self, num):
        self.code = num
    # Метод для преобразования к текстовому формату 
    def __str__(self):
        return str(self.code)
    # Метод для перегрузки оператора сложения 
    def __add__(self, n):
        if type(n) == int:
            val = self.code + n
        else:
            val = 0
        return MyClass(val)
# Создание объекта и проверка методов 
A = MyClass(100)
print("Объект A:", A)
# К объекту прибавляется число
B = A + 25
print("Объект B:", B)
# К объекту пребовляется текст
C = A + "Hello"
print("Объект C:", C)

# Листинг 9.11 Перегрузка операторов

# Класс с перегрузкой оперпторов
class Alpha:
    # Конструктор
    def __init__(self, lst):
        self.vals = []
        if type(lst) == list:
            for n in lst:
                self.vals.append(n)
    # Метод для приведения к текстовому формату 
    def __str__(self):
        return str(self.vals)
    # Унарный оператор "плюс"
    def __pos__(self):
        x = self.vals[0]
        del self.vals[0]
        self.vals.append(x)
        return self
    # Унарный оператор минус
    def __neg__(self):
        x = self.vals[-1]
        del self.vals[-1]
        self.vals.insert(0, x)
        return self
    # Умнажения объекта на операнд
    def __mul__(self, v):
        self.vals.append(v)
        return self
    # Умнажение операнда на объект 
    def __rmul__(self, v):
        self.vals.insert(0, v)
        return self
    # Сокращеная форма операции умножения
    def __imul__(self, v):
        return self * v
# Создание объекта
A = Alpha([1, "A", 2])
# Выполнения операций с объектом
print(A)
print(+A)
print(-A)
print(A*3)
print(4*A)
A = A * "Alpha"
print(A)

# Листинг 9.12 Пергрузка операторов сравнения

# Первый класс
class Alpha:
    # Конструктор
    def __init__(self, val):
        self.value = val
    # Метод для оператора "равно"
    def __eq__(self, val):
        print("Alpha: 'равно'")
        return self.value == val
    # Метод для оператора "не равно"
    def __ne__(self, val):
        print("Alpha: 'не равно'")
        return self.value != val
    # Метод для оператора "меньше"
    def __lt__(self, val):
        print("Alpha: 'меньше' ")
        return self.value < val
    # Метод для оператора "больше или равно"
    def __ge__(self, val):
        print("Alpha: 'больше или равно' ")
        return self.value >= val
# Второй класс
class Bravo:
    # Конструктор
    def __init__(self, val):
        self.value = val
    # Метод для оператора "равно"
    def __eq__(self, val):
        print("Bravo: 'равно' ")
        return self.value == val
# Создание объектов и выполнение сравнений 
A = Alpha(100)
print("Операции с объектом А")
print("[01] A == 100:", A == 100)
print("[02] A != 100:", A != 100)
print("[03] 200 == A:", 200 == A)
print("[04] 200 != A:", 200 != A)
print("[05] A < 200:", A < 200)
print("[06] 200 > A:", 200 > A)
print("[07] A >= 200:", A >= 200)
print("[08] 100 <= A:", 100 <= A)
B = Bravo(300)
print("Операции с объектом B")
print("[09] B == 300:", B == 300)
print("[10] B != 300:", B != 300)
print("[11] 400 == B:", 400 == B)
print("Сравнение B и А")
print("[12] A == B:", A == B)
print("[13] B != A:", B != A)
print("[14] A != B:", A != B)