# 1

# Функция для проверки числа на int
def number(A):
    # Контролируемый код
    try:
        # Проверяем равно ли "А" float 
        if type(A) == float:
            raise ValueError("Неверный формат данных")
        # Проверяем равно ли "А" int 
        elif type(A) == int:
        # Преобразование к числовому формату
            a = int(A)
        else:
            raise ValueError("Неверный формат данных")
    # Обработка исключения
    except:        
        # Генерирование исключения
        raise ValueError("Неверный формат данных")
    # Выводим значения из функции
    return a
# Вводим список 
print("* Решаем линейные уровнения")
A = [2.5, 2, "три", 10, 0, 0.0, 5, 12, [1, 2, 6], -1]
# Переменная для подщета целочисленых значений списка А
sum = 0
# Вызов функции для подсчета целочисленных значений списка 
for k in range(len(A)):
    # Контролируемый код
    try:
        # Выводим число после проверки на целочисленость 
        K = number(A[k])
        print("[", k + 1, "] K = ", K, sep = "")
        sum = sum + K
    # Обработка исключений
    except ValueError as error:
        print("[", k + 1, "]", error, sep = "")
print("Сумма целочисленных значений =", sum)
print("* Все уровнения решены")

Ptint("В низу правильное решение")

# Функция для подщета суммы целочисленных значений
def number(*n):
    # Переменная для подщета целочисленых значений функции
    sum = 0
    Q = 1
    for k in n:
        # Контролируемый код
        try:
            if type(k) == int:
                # Преобразование к числовому формату
                K = int(k)
            else:
                raise ValueError("Неверный формат данных")
            print("[", Q, "] K = ", K, sep = "")
            sum = sum + K  
        # Обработка исключений
        except ValueError as error:
            print("[", Q, "]", error, sep = "")
        Q = Q + 1
    # Выводим значения из функции
    return sum
A = number(2.5, 2, "три", 10, 0, 0.0, 5, 12, [1, 2, 6], -1)   
print("Сумма целочисленных значений =", A)

# 2

while True:
    try:
        a = int(input("Введите нижнюю границу диапазона"))
        b = int(input("Введите верхнюю границу диапазона"))
    # Обработка исключений
    except:
        print("Неверная форма данных, нужно ввести целочисленное значение")
    # Если ошибок не было
    else:
        # Завершение оператора цикла
        break
for s in range(a, b + 1):
    print(s, end = " ")

# 3

# Функция для решения линейного уравнения
def solve(A, B):
    # Контролируемый код
    try:
        # Преобразование к числовому формату
        a = float(A)
        b = float(B)
    # Обработка исключения
    except:
        # Генерирование исключения
        raise ValueError("Неверный формат данных")
    # Проверка значений коэффициентов
    if a == 1 or a == -1:
        if b == 0:
            # Генерирование исключения
            raise Warning("Результат не определен")
        else:
            # Генерирование исключения
            raise ArithmeticError("Решений нет")
    # Результат функции
    return b/((a**2)-1)
# Использование функции для решения уровнений
print("* Решаем квадратного уровнения")
A = [2.5, 2, "три", 10, 0, -1, 2, 1]
B = [3.0, 4, 0, "пять", 5, 0, 9, 15]
# Вызов функции с разными аргументами
for k in range(len(A)):
    a = A[k]
    b = B[k]
    print("[", k + 1, "] Уравнение: (", a, "^2(-1))*x = ", b, sep = "")
    # Контролируемый код
    try:
        print("[", k + 1, "] Решение: х = ", b, "/(", a, "^2(-1))", sep = "")
        print("x =", solve(a, b))
    # Обработка исключений
    except ValueError as error:
        print(error)
    except ArithmeticError as error:
        print(error)
    except Warning as error:
        print(error)
    print("___________________________________________")
print("* Все уровнения решены")

# 4 

# Загружаем математические функции 
import math
# Функция для решения уравнения
def solve(A):
    # Контролируемый код
    try:
        # Преобразование к числовому формату
        a = float(A)
    # Обработка исключения
    except:
        # Генерирование исключения
        raise ValueError("Неверный формат данных")
    # Проверка значений коэффициентов
    if a == 1:
        # Генерирование исключения
        raise ArithmeticError("Решений нет")
    elif a == 0:
         # Генерирование исключения
        raise ArithmeticError("Результат не определен")
    # Результат функции
    return math.sin(a)/(a*(a-1))
# Использование функции для решения уровнений
print("* Решаем квадратного уровнения")
A = [2.5, 2, "три", 10, 0, -1, 2, 1]
# Вызов функции с разными аргументами
for k in range(len(A)):
    a = A[k]
    print(f"[{k+1}] Уравнение: {a}({a}-1)x = sin{a}")
    # Контролируемый код
    try:
        print(f"[{k+1}] Решение: x = sin({a})/{a}({a}-1)")
        print("x =", solve(a))
    # Обработка исключений
    except ValueError as error:
        print(error)
    except ArithmeticError as error:
        print(error)
    except Warning as error:
        print(error)
    print("___________________________________________")
print("* Все уровнения решены")

# 5

class MyError(Exception):
    # Конструктор
    def __init__(self):
        self.values = []
    # Метод обрабатывает операцию сложения
    def __add__(self, val):
        k = int(val)
        self.values.append(chr(k))
        return self
# Функция с рекурсивным вызовом генерирует исключение
def getMyError(n):
    # Контролируем код 
    try:
        if n <= 1:
            # Генерирование исключения
            raise MyError
        if n >= 66 and n <= 90:
            
            # Рекурсивный вызов функции
            getMyError(n-1)
        else:
            # Генерирование исключения
            raise MyError
    # Обработка исключений
    except MyError as error:
        # Генерирование исключения
        raise error + n
# Функция для создания списка 
def getList(n):
    # Контролируемый код
    try:
        # Вызов функции, генерирующей исключение
        getMyError(n)
    # Обработка исключения 
    except MyError as error:
        # Результат функции
        return error.values
# Создание списка 
A = getList(90)
print(A)
A.reverse()
print(A)

# 6

from threading import *
from time import sleep
# Функция для вызова в потоке
def mysum():
    # Глобальная переменная 
    global num
    # Добавка к сумме
    k = 1
    # Текст для отображения
    txt = str(num)
    # Вычисление суммы
    while myevent.is_set():
        # К сумме прибовляется слагаемое
        num = num + k**2
        # Новое значение для текста
        txt = txt + " + " + str(k) + "^2"
        # Отображние текущего значения суммы
        print("[", k, "] ", txt, " = ", num, sep = "")
        # Добавка для следующей итерации
        k = k + 1
        # Пауза в выполнении потока
        sleep(1)
print("Сумма целых чисел")        
# Создание объекта дочернего потока
t = Thread(target = mysum)
# Начальное значение для суммы
num = 0
# Объект для синхранизации потоков
myevent = Event()
# Установка флага
myevent.set()
# Запуск дочернего потока на выполнение
t.start()
# Пауза в выполнеии главного потока
sleep(7)
# Отменна флага
myevent.clear()
# Ожидание завершения выполнения дочернего потока
if t.is_alive():
    t.join()
# Результат вычислений
print("Результат:", num)

# 7

from threading import *
from time import sleep
# Функция для выполнение дочерних потоков
def from_odd():
    global first, last, L
    val = 10
    while True:
        if first < last:
            L[first] = val
            val = val + 10
            first = first + 1
            sleep(0.3)
        else:
            break
def from_honest():
    global first, last, L
    val = "A"
    while True:
        if first < last:
            L[first] = val
            val = chr(ord(val) + 1)
            first = first + 1
            sleep(0.3)
        else:
            break
# Размер списка
size = 20
# Создание списка
L = ["*" for k in range(size)]
# Начальный и конечный индексы
first = 0
last = len(L) 
print("Список до заполнения")
print(L)
# Создание объектов дочерних потоков
A = Thread(target = from_odd)
B = Thread(target = from_honest)
# Запуск потоков на выполнение
A.start()
B.start() 
# Ожидвание завершения потока
A.join()
B.join()
# Результат заполнения списка
print("Список после заполнения")
print(L)

# 8

from threading import *
from time import sleep
# Функция для заполнения списка числами
def numbers_filling(n):
    L = []
    for s in range(n):
        L.append(s)
        sleep(0.003)
    return L
# Функция для заполнения списка симвалами
def symbols_filling(n):
    L = []
    for s in range(n):
        A = chr(ord("A") + s)
        L.append(A)
        sleep(0.003)
    return L
# Функция для выполнения в дочернем потоке
def numbers(n):
    # Блакировка объекта блокировки
    mylock.acquire()
    # Получение ссылки на текущий поток
    T = current_thread()
    print("Количество чисел:", n)
    # Результат вычислений
    print("Список:", numbers_filling(n))
    print("-----------------------------------")
    # Разблокировка объекта блокировки
    mylock.release()
# Функция для выполнения в дочернем потоке
def symbols(n):
    # Блакировка объекта блокировки
    mylock.acquire()
    # Получение ссылки на текущий поток
    T = current_thread()
    print("Количество симвалов:", n)
    # Результат вычислений
    print("Список:", symbols_filling(n))
    print("-----------------------------------")
    # Разблокировка объекта блокировки
    mylock.release()
# Создание объекта блокировки
mylock = Lock()
# Создание списков
T = Thread(target = numbers, args = [10])    
K = Thread(target = symbols, args = [15])    
# Запуск потоков на выполнение
T.start()
K.start()
# Ожидание завершения выполнения потоков
T.join()
K.join()

# ????? Для себя что бы не забыть 

A = []
for k in range(3):
    k = []
    for s in range(4):
        k.append(s)
    A.append(k)
print(A)

# 9

from threading import *
from time import sleep
from random import randint
# Функция создает список для определенного потока и этот список добовляет в начальный список для создания двухмерного списка
def mysum(N):
    A = []
    for k in range(N):
        k = randint(1, 20)
        A.append(k)
    W.append(A)
    sleep(0.1)
    return A
# Функция для выполнения в дочернем потоке
def display(N):
    # Блакировка объекта блокировки
    mylock.acquire()
    # Получение ссылки на текущий поток
    t = current_thread()
    # Отображение именни потока
    print("Поток", t.name)
    print("Количество элементов в списке:", N)
    # Результат создания списка
    print("список:", mysum(N))
    print("-----------------------------------")
    # Разблокировка объекта блокировки
    mylock.release()
# Создание объекта блокировки
mylock = Lock()
# Список с названиями потоков
names = ["Alpha", "Bravo", "Charlie", "Delta"]
# Создаем начальный список 
W = []
# Создание списка с объектами потоков
T = [Thread(target = display, args = [randint(2, 8)], name = names[k]) for k in range(len(names))]
# Запуск потоков на выполнение
for t in T:
    t.start()
# Ожидание завершения выполнения потоков
for t in T:
    t.join()
# Результат выполнения программы
print("Итоговый двухмерный список")
print(W)

# 10

from threading import *
from time import sleep
# Функция для расчета факториала от n - го числа
def Factorial_product(n):
    L = 1
    n = n + 1
    for s in range(1, n):
        L = L * s
        sleep(0.003)
    return L
# Функция для расчета двойного факториала от n - го числа
def DoubleFactorial_product(n):
    L = 1
    while 0 < n:
        L = L * n
        n = n - 2
        sleep(0.003)
    return L
# Функция определяет значения n - го числа последовательности Фибоначчи 
def Number_Fib(n):
    a = b = 1
    i = 2
    while n > i:
        a, b = b, a + b
        i = i + 1
        sleep(0.003)
    return b
# Функция для выполнения в дочернем потоке
def Factorial(n):
    # Блакировка объекта блокировки
    mylock.acquire()
    # Получение ссылки на текущий поток
    T = current_thread()
    print(f"Факториал чмсла: {n}! = {Factorial_product(n)}")
    print("-----------------------------------")
    # Разблокировка объекта блокировки
    mylock.release()
# Функция для выполнения в дочернем потоке
def DoubleFactorial(n):
    # Блакировка объекта блокировки
    mylock.acquire()
    # Получение ссылки на текущий поток
    T = current_thread()
    # Результат вычислений
    print(f"Двойной факториал числа: {n}!! = {DoubleFactorial_product(n)}")
    print("-----------------------------------")
    # Разблокировка объекта блокировки
    mylock.release()
# Функция для выполнения в дочернем потоке
def Fib(n):
    # Блакировка объекта блокировки
    mylock.acquire()
    # Получение ссылки на текущий поток
    T = current_thread()
    # Результат вычислений
    print(f"{n} символ последовательности Фибоначчи = {Number_Fib(n)}")
    print("-----------------------------------")
    # Разблокировка объекта блокировки
    mylock.release()
# Создание объекта блокировки
mylock = Lock()
# Создание списков
T = Thread(target = Factorial, args = [10])    
K = Thread(target = DoubleFactorial, args = [12]) 
R = Thread(target = Fib, args = [19])
# Запуск потоков на выполнение
T.start()
K.start()
R.start()
# Ожидание завершения выполнения потоков
T.join()
K.join()
R.join()