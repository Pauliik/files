# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'u.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import QMessageBox

import pika

class MessageConsumerThread(QThread):
    new_message = pyqtSignal(str)  # Сигнал для отправки новых сообщений в основной поток

    def __init__(self, queue_name):
        super().__init__()
        self.queue_name = queue_name
        self._stop_flag = False

    def run(self):
        # Настройка подключения
        connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
        channel = connection.channel()

        # Создать очередб (если не существует)
        channel.queue_declare(queue=self.queue_name)

        # Функция для обработки полученных сообщений
        def callback(ch, method, properties, body):
            self.new_message.emit(body.decode())  # Отправляем сообщение в основной поток
            ch.basic_ack(delivery_tag=method.delivery_tag)

        # Настраиваем получение сообщений из очереди
        channel.basic_consume(queue=self.queue_name, 
                                   on_message_callback=callback)

        try:
            while not self._stop_flag:
                connection.process_data_events(time_limit=1)
        finally:
            channel.close()
            connection.close()

    def stop(self):
        self._stop_flag = True


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 471)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(70, 250, 161, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(530, 260, 161, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(490, 30, 256, 192))
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(110, 290, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(570, 290, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(360, 370, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(23, 30, 251, 191))
        self.textEdit.setObjectName("textEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.pushButton.clicked.connect(self.send)
        #self.pushButton_3.clicked.connect(self.stop)
        #self.lineEdit_2.textChanged.connect(self.get)  
        self.lineEdit_2.returnPressed.connect(self.get)

        self.consumer_thread = None

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Отправить"))
        self.pushButton_2.setText(_translate("MainWindow", "Полочуть"))
        self.pushButton_3.setText(_translate("MainWindow", "PushButton"))

    def send(self): 
        if self.lineEdit.displayText() in ['1', '2']:
            if len(self.textEdit.toPlainText()) > 0:
                #QMessageBox.warning(self.MainWindow,"Ошибка", "Все ок")

                # Настройка подключения
                connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
                channel = connection.channel()

                # Создаем очередь (если не существует)
                channel.queue_declare(queue=f'{self.lineEdit.displayText()}')

                # Отправляем сообщение
                channel.basic_publish(exchange='',
                    routing_key= f'{self.lineEdit.displayText()}',
                    body=f'{self.textEdit.toPlainText()}')
                    
                print(self.textEdit.toPlainText(), len(self.textEdit.toPlainText()))
                QMessageBox.warning(self.MainWindow,"Ok", "Сообщение отправлено!")
                    

                # Закрываем соединение 
                connection.close()
            else:
                QMessageBox.warning(self.MainWindow,"Ошибка", "Введите ьтекст сообщения")

        else:
            QMessageBox.warning(self.MainWindow,"Ошибка", "Все не ок")  

    def get(self):  
        if self.lineEdit_2.displayText() in ['1', '2']:
            self.textBrowser.clear()
            if self.consumer_thread and self.consumer_thread.isRunning():
                self.consumer_thread.stop()
                self.consumer_thread.wait()
            
            self.consumer_thread = MessageConsumerThread(self.lineEdit_2.displayText())
            self.consumer_thread.new_message.connect(self.display_message)
            self.consumer_thread.start()

        else:
            QMessageBox.warning(self.MainWindow, "Ошибка", "Неверное имя очереди")

    def display_message(self, message):
        self.textBrowser.append(f"Получено сообщение: {message}")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
