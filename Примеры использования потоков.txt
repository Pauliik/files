# Листинг 10.15 Вычисление суммы целых чисел

from threading import *
from time import sleep
# Функция для вызова в потоке
def mysum():
    # Глобальная переменная 
    global num
    # Добавка к сумме
    k = 1
    # Текст для отображения
    txt = str(num)
    # Вычисление суммы
    while myevent.is_set():
        # К сумме прибовляется слагаемое
        num = num + k
        # Новое значение для текста
        txt = txt + " + " + str(k)
        # Отображние текущего значения суммы
        print("[", k, "] ", txt, " = ", num, sep = "")
        # Добавка для следующей итерации
        k = k + 1
        # Пауза в выполнении потока
        sleep(0.3)
print("Сумма целых чисел")        
# Создание объекта дочернего потока
t = Thread(target = mysum)
# Начальное значение для суммы
num = 0
# Объект для синхранизации потоков
myevent = Event()
# Установка флага
myevent.set()
# Запуск дочернего потока на выполнение
t.start()
# Пауза в выполнеии главного потока
sleep(2)
# Отменна флага
myevent.clear()
# Ожидание завершения выполнения дочернего потока
if t.is_alive():
    t.join()
# Результат вычислений
print("Результат:", num)

# Листинг 10.16 Заполнение списка

from threading import *
from time import sleep
# Функция для выполнение дочерних потоков
def from_left():
    global first, last, L
    val = 10
    while True:
        if first < last:
            L[first] = val
            val = val + 10
            first = first + 1
            sleep(0.3)
        else:
            break
def from_right():
    global first, last, L
    val = "A"
    while True:
        if first < last:
            L[last] = val
            val = chr(ord(val) + 1)
            last = last - 1
            sleep(0.3)
        else:
            break
# Размер списка
size = 11
# Создание списка
L = ["*" for k in range(size)]
# Начальный и конечный индексы
first = 0
last = len(L) - 1
print("Список до заполнения")
print(L)
# Создание объектов дочерних потоков
A = Thread(target = from_left)
B = Thread(target = from_right)
# Запуск потоков на выполнение
A.start()
B.start() 
# Ожидвание завершения потока
A.join()
B.join()
# Результат заполнения списка
print("Список после заполнения")
print(L)

# Листинг 10.17 Список с объектами дочерних потоков

from threading import *
from time import sleep
# Функция для вычисления суммы
def mysum(n, N):
    res = 0
    for k in range(N + 1):
        res = res + k**n
        sleep(0.1)
    return res
# Функция для выполнения в дочернем потоке
def display(n, N):
    # Блакировка объекта блокировки
    mylock.acquire()
    # Получение ссылки на текущий поток
    t = current_thread()
    # Отображение именни потока
    print("Поток", t.name)
    print("Слагаемое:", N)
    print("Степень:", n)
    # Результат вычислений
    print("Сумма:", mysum(n, N))
    print("-----------------------------------")
    # Разблокировка объекта блокировки
    mylock.release()
# Создание объекта блокировки
mylock = Lock()
# Список с названиями потоков
names = ["Alpha", "Bravo", "Charlie", "Delta"]
# Создание списка с объектами потоков
T = [Thread(target = display, args = [k + 1, 10], name = names[k]) for k in range(len(names))]
# Запуск потоков на выполнение
for t in T:
    t.start()
# Ожидание завершения выполнения потоков
for t in T:
    t.join()