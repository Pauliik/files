# 1

from tkinter import *
window = Tk()
window.title("Первое задание главы 11")
window.geometry("330x250")
window.resizable(False, False)
cnv = Canvas(window, bg = "white", bd = 2)
cnv.place(width = 320, height = 240, relx = 0.5, rely = 0.5, anchor = CENTER)
cnv.focus_set()
lbl = Label(cnv, text = "Welcome!", font = ("Wolgast Two bold", 18), background = "white", borderwidth = 2,)
lbl.place(relx = 0.5, anchor = N, y = 3,)
btn = Button(cnv, text = "Закрыть", font = ("Wolgast Two", 10,), 
             command = window.destroy, activebackground = 'brown3', activeforeground = 'black',
             bg = 'seagreen3', bd = 1, cursor = 'hand2', fg = "brown2", 
             padx = 20, pady = 5, relief = RIDGE, underline = 3)
btn.place(relx = 0.5, rely = 0.98, anchor = S)
img_1 = PhotoImage(file = "D:\my\Python\smile.png")
cnv.create_image(160, 116, anchor = CENTER, image = img_1)
window.mainloop()

# или или или или или или или или или

from tkinter import *
window = Tk()
window.title("Первое задание главы 11")
window.geometry("330x250")
window.resizable(False, False)
img_1 = PhotoImage(file = "D:\my\Python\smile.png")
cnv = Canvas(window, bg = "white", bd = 2)
cnv.place(width = 320, height = 240, relx = 0.5, rely = 0.5, anchor = CENTER)
cnv.focus_set()
lbl = Label(cnv, text = "Welcome!", font = ("French Script MT", 22), background = "white", borderwidth = 2, 
            image = img_1, compound = "top")
lbl.place(relx = 0.5, anchor = N, y = 3,)
btn = Button(cnv, text = "Закрыть", font = ("French Script MT", 12), 
             command = window.destroy, activebackground = 'brown3', activeforeground = 'black',
             bg = 'seagreen3', bd = 15, cursor = 'hand2', fg = "brown2", 
             padx = 5, pady = 5, relief = RIDGE)
btn.place(relx = 0.5, rely = 0.98, anchor = S)
window.mainloop()

# 2

from tkinter import *
# Функция для отображения, связанного с наведения курсора на область рисования
def msEnter(evt):
    cnv.itemconfig(Pct, image = img_1)
# Функция для отработки события, связанное с тем, что курсор покидает область рисования
def msLeave(evt):
    cnv.itemconfig(Pct, image = img_2)
# Создание объекта окна
win = Tk()
# Заголовок для окна
win.title("Второе задание главы 11")
# Размеры и положение окна
win.geometry("330x250")
# Окно постоянных размеров
win.resizable(False, False)
# Создание объектов для области рисования
cnv = Canvas(win, bg = "yellow", bd = 30)
# Размещеение области рисования в окне
cnv.place(width = 325, height = 245, relx = 0.5, rely = 0.5, anchor = CENTER, 
          bordermode = "outside")
# Передача фокуса области рисования
cnv.focus_set()
# Объект кнопки
btn = Button(command = win.destroy, cursor = "hand2", text = "Закрыть", activebackground = "red",
             bg = "green", bd = 10, fg = "yellow", font = ("Times New Roman", 12), 
             relief = "groove")
# Размещение объекта кнопки в окне
btn.place(relx = 0.5, rely = 0.87, anchor = CENTER)
# Создание объектов изображений
img_1 = PhotoImage(file = "grimace.png")
img_2 = PhotoImage(file = "C:\\Users\\User\\Desktop\\new folder\\anger.png")
# Создание объекта изображения который изначально отображается на области отрисовки
Pct = cnv.create_image(162.5, 95, anchor = CENTER, image = img_1)
# Регистрация обрабодчиков
cnv.bind('<Enter>', msEnter)
cnv.bind('<Leave>', msLeave)
# отображения главного окна 
win.mainloop()

# 3

from tkinter import * 
# Функция для отображения вашего года раждения после ввода вашего возраста
def enter(evt):    
    L = int(entry.get()) 
    k = 2023
    yearsOld = k - L   
    label_1.config(text = f"Вы родились в {yearsOld}")         
# Создание объекта окна
win = Tk()
# Размеры и положение окна
win.geometry("300x200+800+350")
# Заголовок для окна
win.title("Третье задание главы 11")
# Окно постоянных размеров
win.resizable(False, False)
# Создание объектов поля для ввода текста
entry = Entry(cursor = "xterm", foreground = "red", font = ('GOST type A', 12), justify = "left",
              width = 5)
# Размещеение объекта для ввода теккста в окне
entry.place(relx = 0.02, rely = 0.05, anchor = "nw")
# Создание объекта метки
label = Label(text = "Введите свой возраст")
# Размер метки в окне
label.place(relx = 0.16, rely = 0.05, anchor = "nw")
# Создание объекта метки
label_1 = Label(text = "Вы родились в ???")
# Размер метки в окне
label_1.place(relx = 0.02, rely = 0.2, anchor = "nw")
# Регистрация обрабодчиков
win.bind('<Return>', enter)
# отображения главного окна 
win.mainloop()

# 4

from tkinter import * 
# Функция для очистки тестового и текстовой медки
def delite():
    txt.delete("1.0", END)
    label.config(text = "")
# Функция для синхранизации вводимого текста с меткой(метка заполняется в одно время с набераемым текстом)
def copy(evt):
    label["text"] = txt.get('0.0', 'end')
# Создание объекта окна
wnd = Tk()
# Размеры и положение окна
wnd.geometry("500x400+400+200")
# Заголовок для окна
wnd.title("Задание 4 главвы 11")
# Окно постоянных размеров
wnd.resizable(False, False)    
# Создание объектов поля для ввода текста
txt = Text(bd = 5, bg = "white", fg = "red", font = ("Verdana", 14, "italic"),
            padx = 10, pady = 10, relief = "groove", wrap = "word", height = 5,)
# Размещеение объекта для ввода теккста в окне
txt.pack(padx = 10, pady = 10, fill = "x")
# Создание объекта метки
label = Label(background = "yellow", font = ("Verdana", 14, "italic"), foreground = "green", 
                text = "", justify = 'left', anchor = NW, wraplength = 460, 
                borderwidth = 5, height = 7, relief = "groove")
# Размер метки в окне
label.pack(padx = 10, fill = "x", ipadx = 100, pady = 0)
# Объект кнопки
btn_1 = Button(command = wnd.destroy, cursor = "hand2", text = "Закрыть", activebackground = "red",
             bg = "green", bd = 10, fg = "yellow", font = ("Times New Roman", 12), 
             relief = "groove")
#Размещение объекта кнопки в окне
btn_1.place( relx = 0.98, rely = 0.98, anchor = SE)
# Объект кнопки
btn_2 = Button(command = delite, cursor = "hand2", text = "Очистить", activebackground = "red",
             bg = "green", bd = 10, fg = "yellow", font = ("Times New Roman", 12), 
             relief = "groove")
#Размещение объекта кнопки в окне
btn_2.place( relx = 0.02, rely = 0.98, anchor = SW)
# Регистрация обрабодчиков
wnd.bind("<KeyPress>", copy)
# отображения главного окна
wnd.mainloop()

# 5

from tkinter import *
# Функция для увелечения шрифта 
def increase_font():
    global n
    if n < difference:
        n = n + 1
        k = lis[n]
        label.config(text = f"Размер шрифта {k}", font = ("Times New Roman", k))
        return n     
# Функция для уменьшения шрифта
def reduce_font():    
    global n
    if n > 0:
        n = n - 1
        k = lis[n]
        label.config(text = f"Размер шрифта {k}", font = ("Times New Roman", k))
        return n
# Максимальное и минимальное значения шрифта     
size_min = 10
size_max = 25
# Количество элементов в списке
difference = size_max - size_min 
# переменная которая определяет индекс списка 
n = 0
# Создаем список из указаного диапазона размеров шрифта 
lis = []
for k in range(size_min, size_max + 1):
    lis.append(k)
# Создание объекта окна
wnd = Tk()
# Заголовок для окна
wnd.title("Задание 5 главвы 11")
# Размеры и положение окна
wnd.geometry('400x150+500+300')
# Окно постоянных размеров
wnd.resizable(False, False)
# Создание панели
frame = Frame(wnd, relief = GROOVE, bd = 5)
# Размещеение объекта
frame.place(x = 5, y = 5, width = 390, height = 100)
# Создание объекта метки с оглавлением
label_1 = Label(frame, text = "Размер шрифта", font = ("Times New Roman", 14))
# Создание объекта метки с шаблонным текстам
label = Label(frame, bg = "white", relief = RAISED, text = f"Размер шрифта {size_min}", font = ("Times New Roman", size_min),
               height = 5)
# Размещение метки в окне
label_1.pack(fill = X)
# Размещение метки в окне
label.pack(fill = "x")
# Объект кнопки
btn_1 = Button(cursor = "hand2", text = "Увеличеть", bg = "green", relief = "groove",
               font = ("Times New Roman", 12), command = increase_font)
# Объект кнопки
btn_2 = Button(cursor = "hand2", text = "Уменшить", bg = "red", relief = "groove",
               font = ("Times New Roman", 12), command = reduce_font)
#Размещение объекта кнопки в окне
btn_1.place(relx = 0.98, rely = 0.98, anchor = SE)
#Размещение объекта кнопки в окне
btn_2.place(relx = 0.02, rely = 0.98, anchor = SW)
# отображения главного окна
wnd.mainloop()

# 6

from tkinter import *
# Функция для обработки события со статическим списком
def switch(ares):    
    t = listbox.get(listbox.curselection()) #  listbox.curselection - указывает какой именно индекс у выбранного элемента
    for k in range(len(L)):        
        if t == L[k]:
            label.configure(image = imgs[k])            
            break
# Создание объекта окна
wnd = Tk()
# Заголовок для окна
wnd.title("Задание 6 главы 11")
# Размеры и положение окна
wnd.geometry("250x200+400+300")
# Окно постоянных размеров
wnd.resizable(False, False)
# Название эмоций 
L = ["Добрый", "Злой", "Плачет"]
# Название файлов с изображениями 
files = ["smile.png", "anger.png", "sad.png"]
# Список с объектами для изображений
imgs = [PhotoImage(file = f) for f in files]
# Создание объекта метки 
label = Label(wnd, image = imgs[0], relief = "groove")
# Размещение метки в окне
label.place(relx = 0.995, rely = 0.005, anchor = NE)
# Создание объекта статического списка
listbox = Listbox(wnd, listvariable = L, fg = "green", cursor = "hand2", font = ('Segoe Script', 10), 
                  selectforeground = "red", height = 3, width = 7, bd = 3, activestyle = "none")
# Размещение статического списка в окне
listbox.place(relx = 0.005, rely = 0.005, anchor = NW)
# Заполнение статического списка пунктами
for n in L:
    listbox.insert(END, n)
# По умолчанию выбран первый пункт 
listbox.select_set(0)
# Обработчик для статического списка
listbox.bind("<<ListboxSelect>>", switch)
# Отображение окна
wnd.mainloop()

# 7

from tkinter import * 
# Функция для изменения цвета
def colors(*args):    
    if color.get() == "red":        
        label.config(background = "red")
    elif color.get() == "blue":
        label.config(background = "blue")
    elif color.get() == "green":
        label.config(background = "green")
# Создание окна
wnd = Tk()
wnd.title("Задвние 7 главы 11")
wnd.geometry("400x50+400+300")
wnd.resizable(False, False)
# Переменные для определения тестового сождержимого в элементах управления
color = StringVar()
# Переключатели
rb_1 = Radiobutton(cursor = "hand2", text = "Red", fg = "red", variable = color, 
                   value = "red", command = colors)
rb_2 = Radiobutton(cursor = "hand2", text = "Blue", fg = "blue", variable = color, 
                   value = "blue", command = colors)
rb_3 = Radiobutton(cursor = "hand2", text = "Green", fg = "green", variable = color, 
                   value = "green", command = colors)
# Размещение переключателей
rb_1.pack(fill = "x", side = "left", anchor = "n", pady = 5)
rb_2.pack(fill = "x", side = "left", anchor = "n", pady = 5)
rb_3.pack(fill = "x", side = "left", anchor = "n", pady = 5)
# Устанавливается переключатель
color.set("red")
# Создание цветовой метки
label = Label(background = "red")
# Размещение цветовой метки 
label.pack(fill = "both", padx = 10, pady = 5)
# Режим отслеживания значения переменных
color.trace_add("read", colors)
# Отображение окна
wnd.mainloop()

# 8

from tkinter import * 
# Функция для закрытия программы
def clExite():
    wnd.destroy()
# Функция для вывода картинки смайлик
def fd():
    label.config(text = "")
    label.config(image = smil)       
# Функция для отображения картинот в зависемости от нажатия в меню
def qq(*args):
    for s in range(len(names)):
        if names[s] == animals.get():
            label.config(image = imags_1[s], text = f"{names[s]}")
            break 
# Создание окна       
wnd = Tk()
wnd.title("Задание 8 главы 11")
wnd.geometry('500x400+400+200')
wnd.resizable(False, False)
# Переменные для определения тестового сождержимого в элементах управления
animals = StringVar()
# Создание пунктов главного меню
my_menu = Menu()
# Создание подпунктов главного меню
file_menu = Menu(tearoff = 0, font = ('Algerian', 10))
# Добавления подпунктов меню 
file_menu.add_radiobutton(label = "Cobra", value = "Кобра", variable = animals, command = qq)
file_menu.add_radiobutton(label = "Dog", value = "Собака", variable = animals, command = qq)
file_menu.add_radiobutton(label = "Bear", value = 'Медветь', variable = animals, command = qq)
# Добавления пункта меню на панель меню
my_menu.add_cascade(label = 'Animals', menu = file_menu)
my_menu.add_radiobutton(label = "Smile", command = fd, variable = animals)
my_menu.add_command(label = "Exit", command = clExite)
# Задаем главное меню для окна
wnd.config(menu = my_menu)
# Создание  метки
label = Label(wnd, background = 'white', relief = 'ridge', borderwidth = 10, foreground = "red", font = ('Times New Roman', 36, "italic"), 
              compound = "bottom")
# Размещение  метки 
label.place(x = 10, y = 10, anchor = "nw", height = 380, width = 480)
# объект для изображения
smil = PhotoImage(file = "D:\\my\\Python\\smile.png")
# Переменная с путем к файлам изображений 
path = "D:\\my\\Python\\Раскрывающийся список\\"
# Названия файлов с изображениями
files = ['cobra.png', 'dog.png', 'bear.png']
# Названия животных
names = ['Кобра', "Собака", "Медветь"]
# Список с объектами для изображений
imags_1 = [PhotoImage(file = path + f) for f in files]
# Режим отслеживания значения переменных
animals.trace_add("read", qq)
# Отображение окна
wnd.mainloop()

# 9

from tkinter import * 
# Функция для расчета алгебраических вырожений
def enter(evt): 
    try:          
        label_1.config(text = f"ответ равен {eval(entry.get())}") 
    except:
        label_1.config(text = "Произашла ошибка ввода")      
# Создание объекта окна
win = Tk()
# Размеры и положение окна
win.geometry("300x200+800+350")
# Заголовок для окна
win.title("Третье задание главы 11")
# Окно постоянных размеров
win.resizable(False, False)
# Создание объектов поля для ввода текста
entry = Entry(cursor = "xterm", foreground = "red", font = ('Times New Roman', 14), justify = "left",
              width = 18)
# Размещеение объекта для ввода вырожения в окне
entry.place(relx = 0.02, rely = 0.05, anchor = "nw")
# Создание объекта метки
label = Label(text = "Введите вырожение")
# Размер метки в окне
label.place(relx = 0.6, rely = 0.05, anchor = "nw")
# Создание объекта метки
label_1 = Label(text = "ответ равен")
# Размер метки в окне
label_1.place(relx = 0.02, rely = 0.2, anchor = "nw")
# Регистрация обрабодчиков
win.bind('<Return>', enter)
# отображения главного окна 
win.mainloop()

# 10

from tkinter import * 
# Функциb для отработки событий, связанного с нажатием кнопки "вверх", "низ", "вправа", "влево"
def UP(evt):
    canvas_1.move(circle, -1, -1)
def Down(evt):
    canvas_1.move(circle, 1, 1)
def Right(evt):
    canvas_1.move(circle, 1, -1)
def Left(evt):
    canvas_1.move(circle, -1, 1)
# Создание объекта окна
wnd = Tk()
# Размеры и положение окна
wnd.geometry("400x400+400+200")
# Заголовок для окна
wnd.title("Задание 4 главвы 11")
# Окно постоянных размеров
wnd.resizable(False, False)    
# Создание объектов для области рисования
canvas_1 = Canvas(wnd, bg = "green", borderwidth = 10, height = 300, width = 300)
# Размещеение области рисования в окне
canvas_1.place(anchor = "center", x = 200, y = 200)
# Передача фокуса области рисования
canvas_1.focus_set()
# Создание окружности
circle = canvas_1.create_oval(140, 140, 160, 160, fill = "yellow", outline = "red")
# Регистрация обрабодчиков
canvas_1.bind("<Left>", Left)
canvas_1.bind("<Right>", Right)
canvas_1.bind("<Up>", UP)
canvas_1.bind("<Down>", Down)
# отображения главного окна
wnd.mainloop()