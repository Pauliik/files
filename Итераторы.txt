# Листинг 9.20 Знакомство с итераторами

# Создание итератора
vals = iter([100, "A", [1, 2]])
# Проверка итератора
try:
    print("Первое:", next(vals))
    print("Второе:", next(vals))
    print("Третье:", next(vals))
    print("Четвертое:", next(vals))
except StopIteration:
    print("Значений больше нет")

# Листинг 9.21 Подготовка к созданию итератора

# Первый класс
class Alpha:
    # Конструктор
    def __init__(self, *vals):
        L = []
        for v in vals:
            if type(v) == int:
                L.append(v)
        self.nums = L
    # Метод вызывается при вызове функции iter()
    def __iter__(self):
        return Bravo(self.nums)
# Второй класс
class Bravo:
    # Конструктор
    def __init__(self, nums):
        L = []
        for n in nums:
            if n < 10 and n > 0:
                L.append(n)
        self.digits = L
        self.position = -1
    # Метод вызывается при вызове функции next()
    def __next__(self):
        self.position = self.position + 1
        if self.position < len(self.digits):
            return self.digits[self.position]
        else:
            raise StopIteration
# Создание объекта класса Alpha
A = Alpha(2, "A", 12, 7, -3, "Hello", 9, 5, "Alpha")
# Создание объекта класса Bravo
B = iter(A)
# вызове функции next()
try:
    while True:
        print(next(B), end = " ")
except StopIteration:
    print()

# Листинг 9.22 Создание итератора

# Класс итератора 
class MyClass:
    # Конструктор
    def __init__(self, *vals):
        L = []
        for v in vals:
            if type(v) == int:
                if v < 10 and v > 0:
                    L.append(v)
        self.digits = L
        self.position = -1
    # Метод вызывается при вызове функции iter()
    def __iter__(self):
        return self
    # Метод вызывается при вызове функции next()
    def __next__(self):
        self.position = self.position + 1
        if self.position < len(self.digits):
            return self.digits[self.position]
        else:
            raise StopIteration
# Создание итератора
A = MyClass(2, "A", 12, 7, -3, "Hello", 9, 5, "Alpha")
# вызове функции next()
try:
    while True:
        print(next(A), end = " ")
except StopIteration:
    print()    
# Создание итератора
B = MyClass(5, "B", 1.2, 11, -1, "Hi", 8, 4, "Bravo", 3)
# Оператор цикла
for s in B:
    print(s, end = " ")
print()