# 1

# Создаем функцию для расчета суммы попарного произведения элементов из двух списков
def sum(a, b):
    # Создаем оператор для добовления недостоющих элементов в списке b, что бы выровнить количества элементов списка a и b
    if len(a) > len(b):
	# создаем переменную равную разнице количества элементов списка a и b
        l = len(a) - len(b)
	# Переменная для цикла while
        n = 0
	# Создаем цикл для циклического добовления недостоющих элементов в список b
        while n < l:
            b.append(b[n])
            n = n + 1
    # Создаем оператор для добовления недостоющих элементов в списке a, что бы выровнить количества элементов списка a и b
    elif len(a) < len(b):
	# создаем переменную равную разнице количества элементов списка b и a
        l = len(b) - len(a)
	# Переменная для цикла while
        n = 0
	# Создаем цикл для циклического добовления недостоющих элементов в список b
        while n < l:
            a.append(a[n])
            n = n +1
    # Переменная для подщета суммы попарного произведения элементов из двух списков
    sum = 0
    # Создаем цикл для подщета суммы попарного произведения из двух списков
    for s in range(len(a)):
        v = int(a[s]) * int(b[s])
        sum = sum + v
    # Выводим из функции sum
    return sum
# Вводим первый числовой список 
f = input("Введите первый список (числа вводятся через пробел)").split()
# Вводим второй числовой список
g = input("Введите второй список (числа вводятся через пробел)").split()
# Выводим результат 
print(f'Сумма папарных произведений элементов списков {f} и {g} = {sum(f, g)}')

# 2

# Создаем функцию котороя из входящего списка выводит только нечетные числа
def odd(a):
    # Создаем пустой список
    c = list()
    # Создаем цикал для проверки на четность и не четность всх элементов входящего цикла
    for s in a:
	# Переменная r преобразует число списка в целочисленое число
        r = int(s)
	# проверяем на нечетность число из списка и при положительном исходи добовляем это число в новый список 
        if r % 2 == 1:
            c.append(s)
    # Выводим список "с" с функции
    return c
# Создаем список
f = input("Введите числовой список (числа вводятся через пробел)").split()
# Задаем запрос на проверку четности и нечетности входящего списка с помощью функции odd
print(f'проверяем списак {f} на четные и нечетные числа, после проверке создаем новый список состоящий только из нечетных чисел{odd(f)}')

# 3

# Создаем функцию для определенения max, min и среднее значение элементов 
def average(*n):
    # Находим max значения входящих чисел
    M = max(n)
    # Находим min значения входящих чисел
    m = min(n)
    # Переменная для подщета суммы входящих чисел
    s = 0
    # Создаем цикл для подщета суммы входящих чисел
    for k in n:
        s = s + k
    # Определяем среднее значения входящих чисел
    mean = s / len(n)
    # Создаем список из среднего значения, max и min числа из входящего списка 
    list = [mean, M, m]
    # Выводим список list из функции
    return list
# Создаем запрос для выполнения функции average
print("average, max, min = ", average(1, 2, 3, 5))

# 4

# Создаем функцию для написания ногого текста из входящего (целочисленые оргументы определяют индексы букв которые будут входить в новый текст) 
def my(*n, txt):
    # Создаем пустой текст
    c = ''
    # Создаем цикл для переборки всех входящих целочисленых оргументов
    for s in n:
	# Производим проверку, входит ли целочисленый оргумент в диапазон введенного текста
        if s < len(txt):
	    # При положительном результате берем символ из текста с указаным индексам и добовляем в новый текст
            c = c + (txt[s])
    # Выводим новый текст при запросе данной функции
    print("основной текст (", txt, ") после переборки(", c, ")") 
# Создаем запрос для выполнения функции my
my(144, 584, 18, 2, 1589, 4, 5, 12, 564, 11, txt = input("Ввести"))

# 5

# Аргумент функции - функция (и два числа)
def display(f, a, b):
    for k in range(a, b+1):
        print("{0:5}".format(f(k)), end = " ")
    print()
# Результат функции - функция

# Проверка результата 
print("x   ", end = "")
display(lambda x: x**x, 10, 17)

# 6

# Аргумент функции - функция (и число)
def display(f, n):
    return f(n) ** n
        
print(display(lambda x: 2*x+1, 5))

# 9

# Создаем функцию генераьор с нозваниями месяца
def month():
    L = ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"]
    for s in L:
        yield s
for r in month():
    print(r)

# 10

# Создаем функцию-генератор создающию интерируемый обьект со степенями двойка 
def squared(n):
    for s in range(1, n + 1):
        yield s ** 2
# Вызываем функцию squared
for r in squared(int(input("Введите любое целое число"))):
    print(f'{r}')
# Созаем список из девяти интерируемых обьектов    
print(list(squared(9)))