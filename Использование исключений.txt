# Листинг 10.6 Сумма натуральных чисел

# Оператор цыкла с истиным условием 
while True:
    # Считывание значения
    res = input("Введите натуральное число: ")
    # Контролируем код
    try:
        # Попытка преобразования в целое число
        num = int(res)
        # Если число меньше единицы
        if num < 1:
            # Текст сообщения
            msg = "Число должно быть натуральным"
            # Генерирование исключения
            raise ArithmeticError(msg)
        # Обработка исключений 
    except ArithmeticError as error:
        print(error)
    except:
        print("Ошибка ввода")
    # Если ошибок не было
    else:
        # Завершение оператора цикла
        break
# Вычисление суммы натуральных чисел
print("Сумма от 1 до", num, "=", sum(range(num + 1)))

# Листинг 10.7 Решение линейного уравнения

# Функция для решения линейного уравнения
def solve(A, B):
    # Контролируемый код
    try:
        # Преобразование к числовому формату
        a = float(A)
        b = float(B)
    # Обработка исключения
    except:
        # Генерирование исключения
        raise ValueError("Неверный формат данных")
    # Проверка значений коэффициентов
    if a == 0:
        if b != 0:
            # Генерирование исключения
            raise ArithmeticError("Решений нет")
        else:
            # Генерирование исключения
            raise Warning("Решение - любое число")
    # Результат функции
    return b/a
# Использование функции для решения уровнений
print("* Решаем линейные уровнения")
A = [2.5, 2, "три", 10, 0, 0.0]
B = [3.0, 4, 0, "пять", 5, 0]
# Вызов функции с разными аргументами
for k in range(len(A)):
    a = A[k]
    b = B[k]
    print("[", k + 1, "] Уравнение: ", a, "*x = ", b, sep = "")
    # Контролируемый код
    try:
        print("x =", solve(a, b))
    # Обработка исключений
    except ValueError as error:
        print("Неприятная ситуация № 1")
        print(error)
    except ArithmeticError as error:
        print("Неприятная ситуация № 2")
        print(error)
    except Warning as error:
        print("Странная ситуация")
        print(error)
print("* Все уровнения решены")

# Листинг 10.8 Генерирование списка

# Класс исключения
class MyError(Exception):
    # Конструктор
    def __init__(self):
        self.values = []
    # Метод обрабатывает операцию сложения
    def __add__(self, val):
        self.values.append(val)
        return self
# Функция с рекурсивным вызовом генерирует исключение
def getMyError(n):
    # Контролируем код 
    try:
        if n <= 1:
            # Генерирование исключения
            raise MyError
        # Рекурсивный вызов функции
        getMyError(n-1)
    # Обработка исключений
    except MyError as error:
        # Генерирование исключения
        raise error + n
# Функция для создания списка 
def getList(n):
    # Контролируемый код
    try:
        # Вызов функции, генерирующей исключение
        getMyError(n)
    # Обработка исключения 
    except MyError as error:
        # Результат функции
        return error.values
# Создание списка 
A = getList(10)
print(A)
B = getList(7.5)
print(B)